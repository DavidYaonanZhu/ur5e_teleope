// Generated by gencpp from file oculus_msgs/Touch_sensor.msg
// DO NOT EDIT!


#ifndef OCULUS_MSGS_MESSAGE_TOUCH_SENSOR_H
#define OCULUS_MSGS_MESSAGE_TOUCH_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <oculus_msgs/Button_state.h>
#include <oculus_msgs/Button_touch_state.h>

namespace oculus_msgs
{
template <class ContainerAllocator>
struct Touch_sensor_
{
  typedef Touch_sensor_<ContainerAllocator> Type;

  Touch_sensor_()
    : pose()
    , velocity()
    , acceleration()
    , button()
    , touch()  {
    }
  Touch_sensor_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , button(_alloc)
    , touch(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::oculus_msgs::Button_state_<ContainerAllocator>  _button_type;
  _button_type button;

   typedef  ::oculus_msgs::Button_touch_state_<ContainerAllocator>  _touch_type;
  _touch_type touch;





  typedef boost::shared_ptr< ::oculus_msgs::Touch_sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oculus_msgs::Touch_sensor_<ContainerAllocator> const> ConstPtr;

}; // struct Touch_sensor_

typedef ::oculus_msgs::Touch_sensor_<std::allocator<void> > Touch_sensor;

typedef boost::shared_ptr< ::oculus_msgs::Touch_sensor > Touch_sensorPtr;
typedef boost::shared_ptr< ::oculus_msgs::Touch_sensor const> Touch_sensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::oculus_msgs::Touch_sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace oculus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'oculus_msgs': ['/home/hsrnote/catkin_ws/src/oculus_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::oculus_msgs::Touch_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oculus_msgs::Touch_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oculus_msgs::Touch_sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df9d2e53242c616790cc5068ccccb878";
  }

  static const char* value(const ::oculus_msgs::Touch_sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf9d2e53242c6167ULL;
  static const uint64_t static_value2 = 0x90cc5068ccccb878ULL;
};

template<class ContainerAllocator>
struct DataType< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "oculus_msgs/Touch_sensor";
  }

  static const char* value(const ::oculus_msgs::Touch_sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose\n\
geometry_msgs/Twist velocity\n\
geometry_msgs/Accel acceleration\n\
oculus_msgs/Button_state button\n\
oculus_msgs/Button_touch_state touch\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: oculus_msgs/Button_state\n\
std_msgs/Float32 IndexTrigger\n\
std_msgs/Float32 HandTrigger\n\
geometry_msgs/Vector3 Thumbstick\n\
std_msgs/Int8 AX\n\
std_msgs/Int8 BY\n\
std_msgs/Int8 Thumb\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: std_msgs/Int8\n\
int8 data\n\
\n\
================================================================================\n\
MSG: oculus_msgs/Button_touch_state\n\
std_msgs/Int8 AX\n\
std_msgs/Int8 BY\n\
std_msgs/Int8 Thumb\n\
std_msgs/Int8 ThumbRest\n\
std_msgs/Int8 IndexTrigger\n\
std_msgs/Int8 IndexPointing\n\
std_msgs/Int8 ThumbUp\n\
\n\
";
  }

  static const char* value(const ::oculus_msgs::Touch_sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.button);
      stream.next(m.touch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Touch_sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oculus_msgs::Touch_sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::oculus_msgs::Touch_sensor_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "button: ";
    s << std::endl;
    Printer< ::oculus_msgs::Button_state_<ContainerAllocator> >::stream(s, indent + "  ", v.button);
    s << indent << "touch: ";
    s << std::endl;
    Printer< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >::stream(s, indent + "  ", v.touch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCULUS_MSGS_MESSAGE_TOUCH_SENSOR_H
