// Generated by gencpp from file oculus_msgs/Button_touch_state.msg
// DO NOT EDIT!


#ifndef OCULUS_MSGS_MESSAGE_BUTTON_TOUCH_STATE_H
#define OCULUS_MSGS_MESSAGE_BUTTON_TOUCH_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>

namespace oculus_msgs
{
template <class ContainerAllocator>
struct Button_touch_state_
{
  typedef Button_touch_state_<ContainerAllocator> Type;

  Button_touch_state_()
    : AX()
    , BY()
    , Thumb()
    , ThumbRest()
    , IndexTrigger()
    , IndexPointing()
    , ThumbUp()  {
    }
  Button_touch_state_(const ContainerAllocator& _alloc)
    : AX(_alloc)
    , BY(_alloc)
    , Thumb(_alloc)
    , ThumbRest(_alloc)
    , IndexTrigger(_alloc)
    , IndexPointing(_alloc)
    , ThumbUp(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int8_<ContainerAllocator>  _AX_type;
  _AX_type AX;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _BY_type;
  _BY_type BY;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _Thumb_type;
  _Thumb_type Thumb;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _ThumbRest_type;
  _ThumbRest_type ThumbRest;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _IndexTrigger_type;
  _IndexTrigger_type IndexTrigger;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _IndexPointing_type;
  _IndexPointing_type IndexPointing;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _ThumbUp_type;
  _ThumbUp_type ThumbUp;





  typedef boost::shared_ptr< ::oculus_msgs::Button_touch_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oculus_msgs::Button_touch_state_<ContainerAllocator> const> ConstPtr;

}; // struct Button_touch_state_

typedef ::oculus_msgs::Button_touch_state_<std::allocator<void> > Button_touch_state;

typedef boost::shared_ptr< ::oculus_msgs::Button_touch_state > Button_touch_statePtr;
typedef boost::shared_ptr< ::oculus_msgs::Button_touch_state const> Button_touch_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::oculus_msgs::Button_touch_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace oculus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'oculus_msgs': ['/home/hsrnote/catkin_ws/src/oculus_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::oculus_msgs::Button_touch_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oculus_msgs::Button_touch_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oculus_msgs::Button_touch_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c69982bfe4e30341ea264d1ba23dddd2";
  }

  static const char* value(const ::oculus_msgs::Button_touch_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc69982bfe4e30341ULL;
  static const uint64_t static_value2 = 0xea264d1ba23dddd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "oculus_msgs/Button_touch_state";
  }

  static const char* value(const ::oculus_msgs::Button_touch_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int8 AX\n\
std_msgs/Int8 BY\n\
std_msgs/Int8 Thumb\n\
std_msgs/Int8 ThumbRest\n\
std_msgs/Int8 IndexTrigger\n\
std_msgs/Int8 IndexPointing\n\
std_msgs/Int8 ThumbUp\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Int8\n\
int8 data\n\
";
  }

  static const char* value(const ::oculus_msgs::Button_touch_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.AX);
      stream.next(m.BY);
      stream.next(m.Thumb);
      stream.next(m.ThumbRest);
      stream.next(m.IndexTrigger);
      stream.next(m.IndexPointing);
      stream.next(m.ThumbUp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Button_touch_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oculus_msgs::Button_touch_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::oculus_msgs::Button_touch_state_<ContainerAllocator>& v)
  {
    s << indent << "AX: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.AX);
    s << indent << "BY: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.BY);
    s << indent << "Thumb: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.Thumb);
    s << indent << "ThumbRest: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.ThumbRest);
    s << indent << "IndexTrigger: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.IndexTrigger);
    s << indent << "IndexPointing: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.IndexPointing);
    s << indent << "ThumbUp: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.ThumbUp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCULUS_MSGS_MESSAGE_BUTTON_TOUCH_STATE_H
